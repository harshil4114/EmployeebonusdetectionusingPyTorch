# -*- coding: utf-8 -*-
"""EmployeeBonusprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wPrjXmEFfWYkmfPzk0YQh76ihpHtjqff
"""

# Load data from CSV file
import torch
import pandas as pd

import torch.nn as nn
import torch.optim as optim
df = pd.read_csv("bonus.csv")
df.head()

df.shape

# Split data into train and test sets
from sklearn.model_selection import train_test_split
X = df[['performance', 'years_of_experience', 'projects_completed']].values
y = df[['bonus']].values

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)

# Convert to PyTorch tensors
torch.manual_seed(0)
X_train_tensor = torch.tensor(X_train, dtype = torch.float32)
X_test_tensor = torch.tensor(X_test, dtype = torch.float32)
y_train_tensor = torch.tensor(y_train, dtype = torch.float32)
y_test_tensor = torch.tensor(y_test, dtype = torch.float32)

class BonusPredictor(nn.Module):
  def __init__(self):
    super().__init__()
    self.network = nn.Sequential(
        nn.Linear(3,1) # 3 input neuron, 1 output neuron

    )
  def forward(self, x):
      return self.network(x)

model = BonusPredictor()
criterion = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr=0.005)

X_train_tensor.shape

# Training loop
epochs = 5000
for epoch in range(epochs):
    # Forward pass: Compute predicted bonus by passing X_train
    predictions = model(X_train_tensor)
    loss = criterion(predictions, y_train_tensor)

    # Backward pass: Compute gradients
    optimizer.zero_grad()
    loss.backward()

    # Update parameters
    optimizer.step()

    # Print loss every 100 epochs
    if (epoch + 1) % 100 == 0:
        print(f"Epoch [{epoch + 1}/{epochs}], Loss: {loss.item():.2f}")

# Switch to evaluation mode (important for models with dropout/batch norm layers)
model.eval()

with torch.no_grad():
  test_predictions = model(X_test_tensor)
  test_loss = criterion(test_predictions, y_test_tensor)

print(f" Test loss: {test_loss.item(): 0.2f}")

test_predictions[:3]

y_test_tensor[:3]